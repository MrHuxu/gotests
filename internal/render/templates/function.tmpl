{{define "function"}}
{{- $f := .}}

func {{.TestName}}(t *testing.T) {
	assert := assert.New(t)

	{{- if .TestParameters}}
	type args struct {
		{{- range .TestParameters}}
				{{Param .}} {{.Type}}
		{{- end}}
	}
	{{- end}}
	tests := []struct {
		name string
		{{- with .Receiver}}
			{{- if and .IsStruct .Fields}}
				fields {{.Type.Value}}
			{{- else}}
				{{Receiver .}} {{.Type}}
			{{- end}}
		{{- end}}
		{{- if .TestParameters}}
			args args
		{{- end}}
		{{- range .TestResults}}
			{{Want .}} {{.Type}}
		{{- end}}
		{{- if .ReturnsError}}
			err error
		{{- end}}
	}{
		// TODO: Add test cases.
	}
	for {{if (or .Subtests (not .IsNaked))}} _, tt := {{end}} range tests {
		{{- with .Receiver}}
			{{- if .IsStruct}}
				{{Receiver .}} := &tt.fields
			{{- end}}
		{{- end}}
		{{- range .Parameters}}
			{{- if .IsWriter}}
				{{Param .}} := &bytes.Buffer{}
			{{- end}}
		{{- end}}
		{{template "results" $f}} {{template "call" $f}}
		{{- range .TestResults}}
			assert.Equal(tt.{{Want .}}, {{Got .}}, tt.name)
		{{- end}}
		{{- if .ReturnsError}}
			assert.Equal(tt.err, err, tt.name)
		{{- end}}
	}
}

{{end}}
